name: Merge and Release

# Run this job on all pushes and pull requests
# as well as tags with a semantic version
on:
  push:
    branches:
      - '*'
  pull_request: {}

# Cancel previous PR/branch runs when a new commit is pushed
concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  auto-merge:
    if: |
      always() &&
      github.event_name == 'pull_request'
    runs-on: ubuntu-latest

    steps:
      - id: automerge
        name: automerge
        uses: "pascalgn/automerge-action@v0.16.3"
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          MERGE_LABELS: "automated pr ðŸ”§"
          MERGE_FILTER_AUTHOR: "foxbot76"
          MERGE_FORKS: "false"
          MERGE_DELETE_BRANCH: "false"
          UPDATE_LABELS: "automated pr ðŸ”§"
          MERGE_METHOD: "squash"
          MERGE_COMMIT_MESSAGE: "pull-request-title-and-description"
          MERGE_RETRY_SLEEP: 10000

      - name: Checkout code
        if: steps.automerge.outputs.mergeResult == 'merged'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch the history, or this action won't work
          ref: 'main'

      - name: Use Node.js ${{ matrix.node-version }}
        if: steps.automerge.outputs.mergeResult == 'merged'
        uses: actions/setup-node@v4
        with:
          node-version: 20.x

      - name: Determine version
        if: steps.automerge.outputs.mergeResult == 'merged'
        id: version
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            return require('./package.json').version;

      - name: Extract the commit body
        if: steps.automerge.outputs.mergeResult == 'merged'
        id: extract_release
        # The body may be multiline, therefore we need to escape some characters
        run: |
          BODY=$(git show -s --format=%b)
          BODY="${BODY//'%'/'%25'}"
          BODY="${BODY//$'\n'/'%0A'}"
          BODY="${BODY//$'\r'/'%0D'}"
          echo "::set-output name=BODY::$BODY"

      - name: Install Dependencies
        if: steps.automerge.outputs.mergeResult == 'merged'
        run: npm ci

        # The prepublish script also creates a build
      - name: Publish package to npm
        if: steps.automerge.outputs.mergeResult == 'merged'
        run: |
          npm config set //registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}
          npm whoami
          npm publish

      - name: Create Github Release
        if: steps.automerge.outputs.mergeResult == 'merged'
        uses: ncipollo/release-action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag: v${{ steps.version.outputs.result }}
          name: Release v${{ steps.version.outputs.result }}
          draft: false
          prerelease: ${{ contains(steps.version.outputs.result, '-') }}
          body: ${{ steps.extract_release.outputs.BODY }}